/**
 * @name Utils
 * @collection core
 * @description Base utils on core
 */
@import "config";

/**
 * Make retina media query
 * Returns the @content (This mixin is helper)
 * @returns {String}
 */
@mixin make-retina() {
  @media only screen and (min-device-pixel-ratio: 2),
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    @content;
  }
}

@mixin background-image-retina($file, $type, $width, $height) {
  background-image: url($file + '.' + $type);
  width: $width;
  height: $height;
  background-size: 100% auto;
  background-repeat: no-repeat;
  @media only screen and (min-device-pixel-ratio: 2),
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    & {
      background-image: url($file + '@2x.' + $type);
    }
  }
}

/**
 * Make print media query
 * Returns the @content (This mixin is helper)
 * @returns {String}
 */
@mixin make-print() {
  @media print {
    @content;
  }
}

@mixin box-translate(
  $width: auto,
  $height: auto,
  $offset-x: 0,
  $offset-y:0) {

  width: $width;
  height: $height;
  transform: translate($offset-x, $offset-y);
}

%box-shadow {
  // Julian style shadow
  box-shadow: 0 3px 25px 0 rgba(0, 0, 0, .15);
  // Vova style
  //box-shadow: 3px 6px 34px 6px rgba(0, 0, 0, 0.4);
}

// Breakpoints utils

/**
 * Returns the @content
 * @param {String} $key
 * @param {Map} $queries
 * @returns {String}
 */
@mixin queries(
  $key,
  $queries) {

  $query: map-get($queries, $key);

  @if ($query == $defaultQuery) {
    @content;
  } @else {
    @media screen and (max-width: #{$query}) {
      @content;
    }
  }
}

@mixin make-beam(
  $width: 0,
  $height: 0,
  $translateX: 0,
  $translateY: 0
) {
  transform: translate($translateX, $translateY);
  svg {
    width: $width;
    height: $height;
    left: 50%;
    margin-left: -$width / 2;
    position: absolute;
  }
}

@mixin make-beam-raster(
  $width: 0,
  $height: 0,
  $translateX: 0,
  $translateY: 0
) {
  transform: translate($translateX, $translateY);
  img {
    width: $width;
    height: $height;
    left: 50%;
    transform: translateX(-50%);
    position: absolute;
  }
}

// Breakpoints mixins

/**
 * Returns the @content
 * @param {String} $selector
 * @param {Map} $queries
 * @returns {String}
 */
@mixin make-breakpoints(
  $selector,
  $queries: $queries,
  $sizes: $sizes) {

  @each $size in $sizes {
    @include queries($size, $queries) {
      @if ($size == $default) {
        #{$selector} {
          @content;
        }
      } @else {
        #{$selector}#{$block-delimiter}#{$size} {
          @content;
        }
      }
    }
  }
}

/**
 * Returns the @content (This mixin is helper)
 * @returns {String}
 */
@mixin make-break-xlg() {
  @include queries(#{$xlg}, $queries) {
    @content
  }
;
}

/**
 * Returns the @content (This mixin is helper)
 * @returns {String}
 */
@mixin make-break-lg() {
  @include queries(#{$lg}, $queries) {
    @content
  }
;
}

/**
 * Returns the @content (This mixin is helper)
 * @returns {String}
 */
@mixin make-break-md() {
  @include queries(#{$md}, $queries) {
    @content
  }
;
}

/**
 * Returns the @content (This mixin is helper)
 * @returns {String}
 */
@mixin make-break-sm() {
  @include queries(#{$sm}, $queries) {
    @content
  }
;
}

@mixin make-proportional-size($width, $height, $new-width) {
  $height-width-ratio: $height / $width;

  width: $new-width;
  height: round($new-width * $height-width-ratio);
}

@mixin make-aspect-ratio($width, $height) {
  $height-to-width-ratio: percentage($height / $width);

  &:before {
    content: '';
    float: left;
    padding-bottom: $height-to-width-ratio;
  }

  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

// Titles
%h1 {
  font-size: $h1-font-size;
  font-weight: 700;
  line-height: $h1-line-height;

  margin-top: $h1-margin-top;
  margin-bottom: $h1-margin-bottom;

  color: $color-black;
  letter-spacing: -2px;

  &._color-light {
    color: $color-white;
  }

  @include make-break-sm () {
    font-size: $h1-font-size * $h1-size-ratio-sm;
    line-height: $h1-line-height * $h1-size-ratio-sm + 1;

    margin-top: $h1-margin-top * $h1-margin-ratio-sm;
    margin-bottom: $h1-margin-bottom * $h1-margin-ratio-sm;
  }
}

%h1-big {
  font-size: $h1-big-font-size;
  font-weight: 800;
  line-height: $h1-line-height;

  text-transform: uppercase;
  color: $color-black;

  @include make-break-sm () {
    font-size: $h1-big-font-size * $h1-big-size-ratio-sm;
    line-height: $h1-big-line-height * $h1-big-size-ratio-sm + 1;
  }

  &._color-light {
    color: $color-white;
  }
}

%h1-extra-big {
  font-size: $h1-extra-big-font-size;
  font-weight: 700;
  line-height: $h1-extra-big-line-height;

  color: $color-black;

  @include make-break-sm () {
    font-size: $h1-extra-big-font-size* $h1-extra-big-size-ratio-sm;
    line-height: $h1-extra-big-line-height * $h1-extra-big-size-ratio-sm + 1;
  }

  &._color-light {
    color: $color-white;
  }
}

%h2 {
  font-size: $h2-font-size;
  font-weight: 700;
  line-height: $h2-line-height;
  letter-spacing: -0.5px;

  margin-top: $h2-margin-top;
  margin-bottom: $h2-margin-bottom;

  color: $color-black;

  @include make-break-sm () {
    font-size: $h2-font-size * $h2-size-ratio-sm;
    line-height: $h2-line-height * $h2-size-ratio-sm + 2;

    margin-top: $h2-margin-top * $h2-margin-ratio-sm;
    margin-bottom: $h2-margin-bottom * $h2-margin-ratio-sm;
  }

  &._color-light {
    color: $color-white;
  }
}

%h3 {
  font-size: $h3-font-size;
  font-weight: 700;
  line-height: $h3-line-height;

  margin-top: $h3-margin-top;
  margin-bottom: $h3-margin-bottom;

  color: $color-black;

  &._color-light {
    color: $color-white;
  }

  @include make-break-sm () {
    font-size: $h3-font-size * $h3-size-ratio-sm;
    line-height: $h3-line-height * $h3-size-ratio-sm + 1;

    margin-top: $h3-margin-top * $h3-margin-ratio-sm;
    margin-bottom: $h3-margin-bottom * $h3-margin-ratio-sm;
  }
}

%h4 {
  font-size: $h4-font-size;
  font-weight: 700;
  line-height: $h4-line-height;

  margin-top: $h4-margin-top;
  margin-bottom: $h4-margin-bottom;

  text-transform: uppercase;
  color: $color-black;

  &._color-light {
    color: $color-white;
  }

  @include make-break-sm () {
    font-size: $h4-font-size;
    line-height: $h4-line-height * $h4-size-ratio-sm + 1;

    margin-top: $h4-margin-top * $h4-margin-ratio-sm;
    margin-bottom: $h4-margin-bottom * $h4-margin-ratio-sm;
  }
}

%p {
  font-size: inherit;
  line-height: inherit;

  margin-bottom: 10px;
  margin-top: 0;
}

%a-actions {
  &:hover {
    color: $link-color-hover;
  }

  &:active,
  &:focus {
    color: $link-color-active;
  }
}

%subtitle {
  font-size: $subtitle-font-size;
  font-weight: 400;
  line-height: $subtitle-line-height;

  margin-bottom: $subtitle-margin-bottom;

  @include make-break-sm () {
    font-size: $subtitle-font-size * $subtitle-size-ratio-sm;
    line-height: $subtitle-line-height * $subtitle-size-ratio-sm + 1;

    margin-top: $subtitle-margin-top * $subtitle-size-ratio-sm;
    margin-bottom: $subtitle-margin-bottom * $subtitle-size-ratio-sm;
  }

  &._color-light {
    color: $color-white;
  }

  &._color-medium {
    color: $color-text-gray-medium-light;
  }
}

%subtitle-big {
  font-size: $subtitle-big-font-size;
  font-weight: 300;
  line-height: $subtitle-big-line-height;

  margin-bottom: $subtitle-margin-bottom;

  @include make-break-sm () {
    font-size: $subtitle-font-size * $subtitle-size-ratio-sm;
    line-height: $subtitle-line-height * $subtitle-size-ratio-sm + 1;

    margin-top: $subtitle-margin-top * $subtitle-size-ratio-sm;
    margin-bottom: $subtitle-margin-bottom * $subtitle-size-ratio-sm;
  }
}

%section-bg-extra-dark {
  color: $color-white;
  background-color: $color-black;
}

%section-bg-dark {
  color: $color-text-gray-light;
  background-color: $color-bg-gray-dark;
}

%section-bg-medium {
  background-color: $color-bg-gray-light;
}

%section-bg-extra-light {
  background-color: $color-white;
}

%list {
  margin-top: 10px;
  margin-bottom: 15px;
  padding-left: 20px;

  > li {
    margin-bottom: 5px;
    padding-left: 10px;
  }
}

%list-dotted {
  box-sizing: border-box;

  > li {
    position: relative;

    &:before {
      content: '';
      width: 4px;
      height: 4px;
      border-radius: 50%;
      position: absolute;
      left: -13px;
      top: 10px;
      line-height: inherit;
      background-color: $text-color;
    }
  }

  &._dot-bg-light li:before {
    background-color: $color-text-gray-light;
  }
}

%list-style-none {
  padding-left: 0;
  list-style: none;

  > li {
    padding-left: 0;

    &:before {
      display: none;
    }
  }
}

%list-li-no-margin-bottom {
  > li {
    margin-bottom: 0;
  }
}

@mixin arrow-to-cross($bg-color: $color-black) {
  position: absolute;

  width: 15px;
  height: 15px;
  vertical-align: middle;
  transform: rotate(135deg);
  transition: transform $transition-fast;

  &:before,
  &:after {
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;

    display: block;
    margin: auto;
    content: '';

    transition: bottom $transition-fast, right $transition-fast;
    background-color: $bg-color;
  }
  &:before {
    width: 2px;
  }
  &:after {
    height: 2px;
  }
}

@mixin arrow-to-cross-closed() {
  transform: rotate(45deg) translate(0, 2px);

  &:before {
    bottom: 45%;
  }
  &:after {
    right: 45%;
  }
}

%icon-in-image-left-bottom {
  position: relative;
  display: inline-block;

  &:after,
  &:before {
    line-height: $vertical-unit;

    position: absolute;
    bottom: 0;

    box-sizing: border-box;
    height: $vertical-unit;

    background-color: $color-black;
    transition: all $transition-fast;
    content: '';
  }

  &:after {
    width: $vertical-unit;
    left: 0;

    background-repeat: no-repeat;
    background-position: 50% 50%;
    opacity: 0.8;
  }

  &:before {
    font-size: 12px;
    font-weight: 700;
    left: 0;
    padding: 0 15px 0 0;
    text-transform: uppercase;
    white-space: nowrap;
    color: $color-white;
    opacity: 0;
  }

  &:hover:after,
  &:active:after,
  &:focus:after {
    opacity: 1;
    transition: all $transition-fast;
  }

  &:hover:before,
  &:active:before,
  &:focus:before {
    opacity: 1;
    left: $vertical-unit;
    transition: all $transition-fast;
  }

  &._show-img {
    &:after {
      background-image: url('../icon/search/search-white.svg');
    }

    &:before {
      content: 'zoom in'
    }
  }

  &._show-video {
    &:after {
      background-image: url('../icon/play/play-white.svg');
    }

    &:before {
      content: 'watch video'
    }
  }

  &._show-gif {
    &:after {
      background-image: url('../icon/play/play-white.svg');
    }

    &:before {
      content: 'watch gif'
    }
  }

  &._show-screenshot-tour {
    &:after {
      background-image: url('../icon/layout/layout-white.svg');
    }

    &:before {
      content: 'Screenshots Tour'
    }
  }
}